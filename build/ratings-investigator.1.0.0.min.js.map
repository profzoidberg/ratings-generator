{"version":3,"sources":["webpack:///ratings-investigator.1.0.0.min.js","webpack:///webpack/bootstrap d15b82329e576f39dbcd","webpack:///./js/app.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","$","resetSearch","val","hide","remove","submit","event","preventDefault","searchTerm","alert","getRequest","click","hasData","params","url","seasonNum","maxSeason","show","t","r","getJSON","data","undefined","imdbRating","text","Plot","find","Title","seasonResponse","seasonObject","Season","seasonContent","Response","clone","episode","i","Episodes","length","episodeContent","Episode","append","html","parseInt","key"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,GAEtB,YE9CDQ,GAAE,WAWE,QAASC,KACLD,EAAE,UAAUE,IAAI,IAChBF,EAAE,UAAUG,OACZH,EAAE,SAASG,OACXH,EAAE,YAAYI,SAdlBJ,EAAE,WAAWK,OAAO,SAASC,GACzBA,EAAMC,gBACN,IAAIC,GAAaR,EAAE,UAAUE,KACV,MAAfM,EACAC,MAAM,gCAENC,EAAWF,KAUnBR,EAAE,UAAUW,MAAM,WACdV,OAGR,IAAIS,GAAa,SAASF,GACtB,GAAII,IAAU,EACVC,EAAA,OACEC,EAAM,2BACRC,EAAY,EACZC,EAAY,EAChBhB,GAAE,mBAAmBiB,OACrBjB,EAAE,UAAUiB,OACZjB,EAAE,SAASiB,OAEXJ,GACIK,EAAGV,EACHW,EAAG,QAGPnB,EAAEoB,QAAQN,EAAKD,EAAQ,SAASQ,GACJC,SAApBD,EAAKE,YACLvB,EAAE,cAAcG,OAChBH,EAAE,SAASG,OACXH,EAAE,iBAAiBG,OACnBH,EAAE,kBAAkBwB,KAAK,uBAEzBxB,EAAE,iBAAiBiB,OACnBjB,EAAE,kBAAkBwB,KAAK,kBAAoBH,EAAKE,YAClDvB,EAAE,gBAAgBwB,KAAKH,EAAKI,MAC5BzB,EAAE,UAAU0B,KAAK,iBAAiBF,KAAKH,EAAKM,SAOpD,KAHA,GAAIC,GAAiB,EACjBC,KAEGjB,GAAWG,EAAYC,GAE1BH,GACIK,EAAGV,EACHsB,OAAQf,EACRI,EAAG,QAEPnB,EAAEoB,QAAQN,EAAKD,EAAQ,SAASQ,GAC5BO,GACA,IAAIG,GAAA,MACJ,IAAqB,SAAjBV,EAAKW,SAELpB,GAAU,EACVmB,EAAgB,SACb,CAEHA,EAAgB/B,EAAE,mBAAmBiC,QAErCF,EAAcL,KAAK,iBAAiBF,KAAK,UAAYH,EAAKS,OAG1D,KAAK,GADDI,GAAA,OACKC,EAAI,EAAGA,EAAId,EAAKe,SAASC,OAAQF,IAAK,CAC3CD,EAAUb,EAAKe,SAASD,EAExB,IAAIG,GAAiBtC,EAAE,oBAAoBiC,OAE3CK,GAAeZ,KAAK,kBAAkBF,KAAK,WAAaU,EAAQK,QAAU,KAAYL,EAAQP,MAAQ,KAAOO,EAAQX,YAErHQ,EAAcS,OAAOF,EAAeG,SAK5C,GADAZ,EAAaa,SAASrB,EAAKS,SAAWC,EAClCH,GAAkBb,EAAY,EAC9B,IAAI,GAAI4B,KAAOd,GACNA,EAAac,IAGlB3C,EAAE,mBAAmBwC,OAAO,yBAA2BX,EAAac,GAAKF,OAAS,YAM9F1B","file":"ratings-investigator.1.0.0.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t$(function () {\n\t    $('#search').submit(function (event) {\n\t        event.preventDefault();\n\t        var searchTerm = $('#query').val();\n\t        if (searchTerm === '') {\n\t            alert('Please investigate a series!');\n\t        } else {\n\t            getRequest(searchTerm);\n\t        }\n\t    });\n\t\n\t    function resetSearch() {\n\t        $('#query').val('');\n\t        $('.title').hide();\n\t        $('.plot').hide();\n\t        $('.seasons').remove();\n\t    }\n\t    $('#reset').click(function () {\n\t        resetSearch();\n\t    });\n\t});\n\tvar getRequest = function getRequest(searchTerm) {\n\t    var hasData = true;\n\t    var params = void 0;\n\t    var url = 'http://www.omdbapi.com/?';\n\t    var seasonNum = 1;\n\t    var maxSeason = 30;\n\t    $('#search-results').show();\n\t    $('.title').show();\n\t    $('.plot').show();\n\t    // div is display: none in css, when user clicks submit, the div will show\n\t    params = {\n\t        t: searchTerm,\n\t        r: 'json'\n\t    };\n\t\n\t    $.getJSON(url, params, function (data) {\n\t        if (data.imdbRating === undefined) {\n\t            $('#star-rate').hide();\n\t            $('.plot').hide();\n\t            $('.series-title').hide();\n\t            $('.series-rating').text('Series Not Found!');\n\t        } else {\n\t            $('.series-title').show();\n\t            $('.series-rating').text('Series Rating: ' + data.imdbRating);\n\t            $('.series-plot').text(data.Plot);\n\t            $('.title').find('.series-title').text(data.Title);\n\t            // places the text of the show title to the page\n\t        }\n\t    });\n\t    var seasonResponse = 0;\n\t    var seasonObject = {};\n\t    var orderSeasons = void 0;\n\t    while (hasData && seasonNum < maxSeason) {\n\t        // run the while loop until we reach maxSeason, or we have data\n\t        params = {\n\t            t: searchTerm,\n\t            Season: seasonNum,\n\t            r: 'json'\n\t        };\n\t        $.getJSON(url, params, function (data) {\n\t            seasonResponse++;\n\t            var seasonContent = void 0;\n\t            if (data.Response == 'False') {\n\t                // if data is null, then hasData will equal false, thus stopping the while loop.\n\t                hasData = false;\n\t                seasonContent = null;\n\t            } else {\n\t                // $('.plot').find('.series-plot').text(data.Plot);\n\t                seasonContent = $('.season-content').clone();\n\t                // cloning the season-content div and storing in variable\n\t                seasonContent.find('.season-title').text('Season ' + data.Season);\n\t                // this shows the correct season number\n\t                var episode = void 0;\n\t                for (var i = 0; i < data.Episodes.length; i++) {\n\t                    episode = data.Episodes[i];\n\t                    // showResults(episode);\n\t                    var episodeContent = $('.episode-content').clone();\n\t                    // cloning the season-content div and storing in variable\n\t                    episodeContent.find('.episode-title').text('Episode ' + episode.Episode + ':' + ' ' + episode.Title + ', ' + episode.imdbRating);\n\t                    // changing the value of seasonContent\n\t                    seasonContent.append(episodeContent.html());\n\t                    // when you use .html(), you return only a string value\n\t                }\n\t            }\n\t            seasonObject[parseInt(data.Season)] = seasonContent;\n\t            if (seasonResponse == seasonNum - 1) {\n\t                for (var key in seasonObject) {\n\t                    if (!seasonObject[key]) {\n\t                        continue;\n\t                    }\n\t                    $('#search-results').append('<div class =\"seasons\">' + seasonObject[key].html() + '</div>');\n\t                }\n\t            }\n\t            // all the data, the final commit\n\t            // seasons append to separate div classes\n\t        });\n\t        seasonNum++;\n\t    }\n\t};\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** ratings-investigator.1.0.0.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d15b82329e576f39dbcd\n **/","$(function() {\n    $('#search').submit(function(event) {\n        event.preventDefault();\n        var searchTerm = $('#query').val();\n        if (searchTerm === '') {\n            alert('Please investigate a series!');\n        } else {\n            getRequest(searchTerm);\n        }\n    });\n\n    function resetSearch() {\n        $('#query').val('');\n        $('.title').hide();\n        $('.plot').hide();\n        $('.seasons').remove();\n    }\n    $('#reset').click(function() {\n        resetSearch();\n    });\n});\nvar getRequest = function(searchTerm) {\n    let hasData = true;\n    let params;\n    const url = 'http://www.omdbapi.com/?';\n    let seasonNum = 1;\n    let maxSeason = 30;\n    $('#search-results').show();\n    $('.title').show();\n    $('.plot').show();\n    // div is display: none in css, when user clicks submit, the div will show\n    params = {\n        t: searchTerm,\n        r: 'json'\n    };\n\n    $.getJSON(url, params, function(data) {\n        if (data.imdbRating === undefined) {\n            $('#star-rate').hide();\n            $('.plot').hide();\n            $('.series-title').hide();\n            $('.series-rating').text('Series Not Found!');\n        } else {\n            $('.series-title').show();\n            $('.series-rating').text('Series Rating: ' + data.imdbRating);\n            $('.series-plot').text(data.Plot);\n            $('.title').find('.series-title').text(data.Title);\n            // places the text of the show title to the page\n        }\n    });\n    let seasonResponse = 0;\n    let seasonObject = {};\n    let orderSeasons;\n    while (hasData && seasonNum < maxSeason) {\n        // run the while loop until we reach maxSeason, or we have data\n        params = {\n            t: searchTerm,\n            Season: seasonNum,\n            r: 'json'\n        };\n        $.getJSON(url, params, function(data) {\n            seasonResponse++;\n            let seasonContent;\n            if (data.Response == 'False') {\n                // if data is null, then hasData will equal false, thus stopping the while loop.\n                hasData = false;\n                seasonContent = null;\n            } else {\n                // $('.plot').find('.series-plot').text(data.Plot);\n                seasonContent = $('.season-content').clone();\n                // cloning the season-content div and storing in variable\n                seasonContent.find('.season-title').text('Season ' + data.Season);\n                // this shows the correct season number\n                let episode\n                for (let i = 0; i < data.Episodes.length; i++) {\n                    episode = data.Episodes[i];\n                    // showResults(episode);\n                    let episodeContent = $('.episode-content').clone();\n                    // cloning the season-content div and storing in variable\n                    episodeContent.find('.episode-title').text('Episode ' + episode.Episode + ':' + ' ' + episode.Title + ', ' + episode.imdbRating);\n                    // changing the value of seasonContent\n                    seasonContent.append(episodeContent.html());\n                    // when you use .html(), you return only a string value\n                }\n            }\n            seasonObject[parseInt(data.Season)] = seasonContent;\n            if (seasonResponse == seasonNum - 1) {\n                for(var key in seasonObject) {\n                    if (!seasonObject[key]) {\n                        continue;\n                    }\n                    $('#search-results').append('<div class =\"seasons\">' + seasonObject[key].html() + '</div>');\n                }\n            }\n            // all the data, the final commit\n            // seasons append to separate div classes\n        });\n        seasonNum++;\n    }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/app.js\n **/"],"sourceRoot":""}